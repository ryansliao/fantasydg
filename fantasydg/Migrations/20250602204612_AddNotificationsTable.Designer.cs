// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using fantasydg.Data;

#nullable disable

namespace fantasydg.Migrations
{
    [DbContext(typeof(ApplicationDbContext))]
    [Migration("20250602204612_AddNotificationsTable")]
    partial class AddNotificationsTable
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "9.0.5")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder);

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRole", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("NormalizedName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.HasKey("Id");

                    b.HasIndex("NormalizedName")
                        .IsUnique()
                        .HasDatabaseName("RoleNameIndex")
                        .HasFilter("[NormalizedName] IS NOT NULL");

                    b.ToTable("AspNetRoles", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<string>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("ClaimType")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("RoleId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("Id");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetRoleClaims", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<string>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("ClaimType")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserClaims", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<string>", b =>
                {
                    b.Property<string>("LoginProvider")
                        .HasMaxLength(128)
                        .HasColumnType("nvarchar(128)");

                    b.Property<string>("ProviderKey")
                        .HasMaxLength(128)
                        .HasColumnType("nvarchar(128)");

                    b.Property<string>("ProviderDisplayName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("LoginProvider", "ProviderKey");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserLogins", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<string>", b =>
                {
                    b.Property<string>("UserId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("RoleId")
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("UserId", "RoleId");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetUserRoles", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<string>", b =>
                {
                    b.Property<string>("UserId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("LoginProvider")
                        .HasMaxLength(128)
                        .HasColumnType("nvarchar(128)");

                    b.Property<string>("Name")
                        .HasMaxLength(128)
                        .HasColumnType("nvarchar(128)");

                    b.Property<string>("Value")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("UserId", "LoginProvider", "Name");

                    b.ToTable("AspNetUserTokens", (string)null);
                });

            modelBuilder.Entity("fantasydg.Models.ApplicationUser", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("nvarchar(450)");

                    b.Property<int>("AccessFailedCount")
                        .HasColumnType("int");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Email")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<bool>("EmailConfirmed")
                        .HasColumnType("bit");

                    b.Property<bool>("LockoutEnabled")
                        .HasColumnType("bit");

                    b.Property<DateTimeOffset?>("LockoutEnd")
                        .HasColumnType("datetimeoffset");

                    b.Property<string>("NormalizedEmail")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("NormalizedUserName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("PasswordHash")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("PhoneNumber")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("PhoneNumberConfirmed")
                        .HasColumnType("bit");

                    b.Property<string>("SecurityStamp")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("TwoFactorEnabled")
                        .HasColumnType("bit");

                    b.Property<string>("UserName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.HasKey("Id");

                    b.HasIndex("NormalizedEmail")
                        .HasDatabaseName("EmailIndex");

                    b.HasIndex("NormalizedUserName")
                        .IsUnique()
                        .HasDatabaseName("UserNameIndex")
                        .HasFilter("[NormalizedUserName] IS NOT NULL");

                    b.ToTable("AspNetUsers", (string)null);
                });

            modelBuilder.Entity("fantasydg.Models.League", b =>
                {
                    b.Property<int>("LeagueId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("LeagueId"));

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("OwnerId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.Property<int>("PlayerNumber")
                        .HasColumnType("int");

                    b.HasKey("LeagueId");

                    b.HasIndex("OwnerId");

                    b.ToTable("Leagues");
                });

            modelBuilder.Entity("fantasydg.Models.LeagueInvitation", b =>
                {
                    b.Property<int>("LeagueInvitationId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("LeagueInvitationId"));

                    b.Property<int>("LeagueId")
                        .HasColumnType("int");

                    b.Property<DateTime>("SentAt")
                        .HasColumnType("datetime2");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("LeagueInvitationId");

                    b.HasIndex("LeagueId");

                    b.HasIndex("UserId");

                    b.ToTable("LeagueInvitations");
                });

            modelBuilder.Entity("fantasydg.Models.LeagueMember", b =>
                {
                    b.Property<int>("LeagueId")
                        .HasColumnType("int");

                    b.Property<string>("UserId")
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("LeagueId", "UserId");

                    b.HasIndex("UserId");

                    b.ToTable("LeagueMembers");
                });

            modelBuilder.Entity("fantasydg.Models.LeagueOwnershipTransfer", b =>
                {
                    b.Property<int>("LeagueOwnershipTransferId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("LeagueOwnershipTransferId"));

                    b.Property<int>("LeagueId")
                        .HasColumnType("int");

                    b.Property<string>("NewOwnerId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.Property<DateTime>("RequestedAt")
                        .HasColumnType("datetime2");

                    b.HasKey("LeagueOwnershipTransferId");

                    b.HasIndex("LeagueId");

                    b.HasIndex("NewOwnerId");

                    b.ToTable("LeagueOwnershipTransfers");
                });

            modelBuilder.Entity("fantasydg.Models.Notification", b =>
                {
                    b.Property<int>("NotificationId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("NotificationId"));

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime2");

                    b.Property<bool>("IsRead")
                        .HasColumnType("bit");

                    b.Property<string>("Message")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("NotificationId");

                    b.HasIndex("UserId");

                    b.ToTable("Notifications");
                });

            modelBuilder.Entity("fantasydg.Models.Player", b =>
                {
                    b.Property<int>("PlayerId")
                        .HasColumnType("int");

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("PlayerId");

                    b.ToTable("Players");
                });

            modelBuilder.Entity("fantasydg.Models.PlayerTournament", b =>
                {
                    b.Property<int>("PlayerId")
                        .HasColumnType("int")
                        .HasColumnOrder(0);

                    b.Property<int>("TournamentId")
                        .HasColumnType("int")
                        .HasColumnOrder(1);

                    b.Property<string>("Division")
                        .HasColumnType("nvarchar(450)")
                        .HasColumnOrder(2);

                    b.Property<double>("Birdie")
                        .HasColumnType("float");

                    b.Property<double>("BirdieMinus")
                        .HasColumnType("float");

                    b.Property<double>("BogeyPlus")
                        .HasColumnType("float");

                    b.Property<double>("C1InReg")
                        .HasColumnType("float");

                    b.Property<double>("C1Putting")
                        .HasColumnType("float");

                    b.Property<double>("C1xPutting")
                        .HasColumnType("float");

                    b.Property<double>("C2InReg")
                        .HasColumnType("float");

                    b.Property<double>("C2Putting")
                        .HasColumnType("float");

                    b.Property<double>("DoubleBogeyPlus")
                        .HasColumnType("float");

                    b.Property<double>("EagleMinus")
                        .HasColumnType("float");

                    b.Property<double>("Fairway")
                        .HasColumnType("float");

                    b.Property<double>("ObRate")
                        .HasColumnType("float");

                    b.Property<double>("Par")
                        .HasColumnType("float");

                    b.Property<double>("Parked")
                        .HasColumnType("float");

                    b.Property<int>("Place")
                        .HasColumnType("int");

                    b.Property<int>("PuttDistance")
                        .HasColumnType("int");

                    b.Property<double>("Scramble")
                        .HasColumnType("float");

                    b.Property<double>("StrokesGainedC1xPutting")
                        .HasColumnType("float");

                    b.Property<double>("StrokesGainedC2Putting")
                        .HasColumnType("float");

                    b.Property<double>("StrokesGainedPutting")
                        .HasColumnType("float");

                    b.Property<double>("StrokesGainedTeeToGreen")
                        .HasColumnType("float");

                    b.Property<double>("StrokesGainedTotal")
                        .HasColumnType("float");

                    b.Property<int>("TotalToPar")
                        .HasColumnType("int");

                    b.HasKey("PlayerId", "TournamentId", "Division");

                    b.HasIndex("TournamentId", "Division");

                    b.ToTable("PlayerTournaments");
                });

            modelBuilder.Entity("fantasydg.Models.Round", b =>
                {
                    b.Property<int>("RoundId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("RoundId"));

                    b.Property<string>("Division")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.Property<int>("RoundNumber")
                        .HasColumnType("int");

                    b.Property<int>("TournamentId")
                        .HasColumnType("int");

                    b.HasKey("RoundId");

                    b.HasIndex("TournamentId", "Division");

                    b.ToTable("Rounds");
                });

            modelBuilder.Entity("fantasydg.Models.RoundScore", b =>
                {
                    b.Property<int>("RoundId")
                        .HasColumnType("int")
                        .HasColumnOrder(0);

                    b.Property<int>("PlayerId")
                        .HasColumnType("int")
                        .HasColumnOrder(1);

                    b.Property<double>("Birdie")
                        .HasColumnType("float");

                    b.Property<double>("BirdieMinus")
                        .HasColumnType("float");

                    b.Property<double>("BogeyPlus")
                        .HasColumnType("float");

                    b.Property<double>("C1InReg")
                        .HasColumnType("float");

                    b.Property<double>("C1Putting")
                        .HasColumnType("float");

                    b.Property<double>("C1xPutting")
                        .HasColumnType("float");

                    b.Property<double>("C2InReg")
                        .HasColumnType("float");

                    b.Property<double>("C2Putting")
                        .HasColumnType("float");

                    b.Property<string>("Division")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<double>("DoubleBogeyPlus")
                        .HasColumnType("float");

                    b.Property<double>("EagleMinus")
                        .HasColumnType("float");

                    b.Property<double>("Fairway")
                        .HasColumnType("float");

                    b.Property<double>("ObRate")
                        .HasColumnType("float");

                    b.Property<double>("Par")
                        .HasColumnType("float");

                    b.Property<double>("Parked")
                        .HasColumnType("float");

                    b.Property<int>("PuttDistance")
                        .HasColumnType("int");

                    b.Property<int>("RoundToPar")
                        .HasColumnType("int");

                    b.Property<int>("RunningPlace")
                        .HasColumnType("int");

                    b.Property<int>("RunningToPar")
                        .HasColumnType("int");

                    b.Property<double>("Scramble")
                        .HasColumnType("float");

                    b.Property<double>("StrokesGainedC1xPutting")
                        .HasColumnType("float");

                    b.Property<double>("StrokesGainedC2Putting")
                        .HasColumnType("float");

                    b.Property<double>("StrokesGainedPutting")
                        .HasColumnType("float");

                    b.Property<double>("StrokesGainedTeeToGreen")
                        .HasColumnType("float");

                    b.Property<double>("StrokesGainedTotal")
                        .HasColumnType("float");

                    b.HasKey("RoundId", "PlayerId");

                    b.HasIndex("PlayerId");

                    b.ToTable("RoundScores");
                });

            modelBuilder.Entity("fantasydg.Models.Team", b =>
                {
                    b.Property<int>("TeamId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("TeamId"));

                    b.Property<int>("LeagueId")
                        .HasColumnType("int");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("OwnerId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("TeamId");

                    b.HasIndex("OwnerId");

                    b.HasIndex("LeagueId", "OwnerId")
                        .IsUnique();

                    b.ToTable("Teams");
                });

            modelBuilder.Entity("fantasydg.Models.TeamPlayer", b =>
                {
                    b.Property<int>("TeamId")
                        .HasColumnType("int");

                    b.Property<int>("PlayerId")
                        .HasColumnType("int");

                    b.Property<int>("LeagueId")
                        .HasColumnType("int");

                    b.HasKey("TeamId", "PlayerId");

                    b.HasIndex("PlayerId");

                    b.HasIndex("LeagueId", "PlayerId")
                        .IsUnique();

                    b.ToTable("TeamPlayers");
                });

            modelBuilder.Entity("fantasydg.Models.Tournament", b =>
                {
                    b.Property<int>("Id")
                        .HasColumnType("int")
                        .HasColumnOrder(0);

                    b.Property<string>("Division")
                        .HasColumnType("nvarchar(450)")
                        .HasColumnOrder(1);

                    b.Property<DateTime>("Date")
                        .HasColumnType("datetime2");

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(max)");

                    b.Property<double>("Weight")
                        .HasColumnType("float");

                    b.HasKey("Id", "Division");

                    b.ToTable("Tournaments");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityRole", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<string>", b =>
                {
                    b.HasOne("fantasydg.Models.ApplicationUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<string>", b =>
                {
                    b.HasOne("fantasydg.Models.ApplicationUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityRole", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("fantasydg.Models.ApplicationUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<string>", b =>
                {
                    b.HasOne("fantasydg.Models.ApplicationUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("fantasydg.Models.League", b =>
                {
                    b.HasOne("fantasydg.Models.ApplicationUser", "Owner")
                        .WithMany("LeaguesOwned")
                        .HasForeignKey("OwnerId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Owner");
                });

            modelBuilder.Entity("fantasydg.Models.LeagueInvitation", b =>
                {
                    b.HasOne("fantasydg.Models.League", "League")
                        .WithMany()
                        .HasForeignKey("LeagueId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("fantasydg.Models.ApplicationUser", "User")
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("League");

                    b.Navigation("User");
                });

            modelBuilder.Entity("fantasydg.Models.LeagueMember", b =>
                {
                    b.HasOne("fantasydg.Models.League", "League")
                        .WithMany("Members")
                        .HasForeignKey("LeagueId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("fantasydg.Models.ApplicationUser", "User")
                        .WithMany("LeagueMemberships")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("League");

                    b.Navigation("User");
                });

            modelBuilder.Entity("fantasydg.Models.LeagueOwnershipTransfer", b =>
                {
                    b.HasOne("fantasydg.Models.League", "League")
                        .WithMany()
                        .HasForeignKey("LeagueId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("fantasydg.Models.ApplicationUser", "NewOwner")
                        .WithMany()
                        .HasForeignKey("NewOwnerId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("League");

                    b.Navigation("NewOwner");
                });

            modelBuilder.Entity("fantasydg.Models.Notification", b =>
                {
                    b.HasOne("fantasydg.Models.ApplicationUser", "User")
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("User");
                });

            modelBuilder.Entity("fantasydg.Models.PlayerTournament", b =>
                {
                    b.HasOne("fantasydg.Models.Player", "Player")
                        .WithMany("PlayerTournaments")
                        .HasForeignKey("PlayerId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("fantasydg.Models.Tournament", "Tournament")
                        .WithMany("PlayerTournaments")
                        .HasForeignKey("TournamentId", "Division")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Player");

                    b.Navigation("Tournament");
                });

            modelBuilder.Entity("fantasydg.Models.Round", b =>
                {
                    b.HasOne("fantasydg.Models.Tournament", "Tournament")
                        .WithMany("Rounds")
                        .HasForeignKey("TournamentId", "Division")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Tournament");
                });

            modelBuilder.Entity("fantasydg.Models.RoundScore", b =>
                {
                    b.HasOne("fantasydg.Models.Player", "Player")
                        .WithMany()
                        .HasForeignKey("PlayerId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("fantasydg.Models.Round", "Round")
                        .WithMany("RoundScores")
                        .HasForeignKey("RoundId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Player");

                    b.Navigation("Round");
                });

            modelBuilder.Entity("fantasydg.Models.Team", b =>
                {
                    b.HasOne("fantasydg.Models.League", "League")
                        .WithMany("Teams")
                        .HasForeignKey("LeagueId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("fantasydg.Models.ApplicationUser", "Owner")
                        .WithMany("TeamsOwned")
                        .HasForeignKey("OwnerId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("League");

                    b.Navigation("Owner");
                });

            modelBuilder.Entity("fantasydg.Models.TeamPlayer", b =>
                {
                    b.HasOne("fantasydg.Models.Player", "Player")
                        .WithMany("TeamPlayers")
                        .HasForeignKey("PlayerId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("fantasydg.Models.Team", "Team")
                        .WithMany("TeamPlayers")
                        .HasForeignKey("TeamId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Player");

                    b.Navigation("Team");
                });

            modelBuilder.Entity("fantasydg.Models.ApplicationUser", b =>
                {
                    b.Navigation("LeagueMemberships");

                    b.Navigation("LeaguesOwned");

                    b.Navigation("TeamsOwned");
                });

            modelBuilder.Entity("fantasydg.Models.League", b =>
                {
                    b.Navigation("Members");

                    b.Navigation("Teams");
                });

            modelBuilder.Entity("fantasydg.Models.Player", b =>
                {
                    b.Navigation("PlayerTournaments");

                    b.Navigation("TeamPlayers");
                });

            modelBuilder.Entity("fantasydg.Models.Round", b =>
                {
                    b.Navigation("RoundScores");
                });

            modelBuilder.Entity("fantasydg.Models.Team", b =>
                {
                    b.Navigation("TeamPlayers");
                });

            modelBuilder.Entity("fantasydg.Models.Tournament", b =>
                {
                    b.Navigation("PlayerTournaments");

                    b.Navigation("Rounds");
                });
#pragma warning restore 612, 618
        }
    }
}
