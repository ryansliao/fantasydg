@model IEnumerable<object>

@{
    ViewBag.Title = "Tournament Database";
    var roundView = Model != null && Model.Any() && Model.First().GetType().Name == "RoundScore";
}

<h2>Database View</h2>

<style>
    table.player-stats {
        width: 100%;
        border-collapse: collapse;
        font-size: 0.95rem;
    }

    table.player-stats th,
    table.player-stats td {
        border: 1px solid #ccc;
        padding: 6px 10px;
        text-align: center;
    }

    table.player-stats thead {
        background-color: #f5f5f5;
    }

    table.player-stats tbody tr:nth-child(even) {
        background-color: #f9f9f9;
    }

    table.player-stats th {
        position: sticky;
        top: 0;
        background: #eee;
        z-index: 1;
    }

    .table-scroll-container {
        position: relative;
        padding-bottom: 10px;
    }

    .table-scroll-top,
    .table-scroll-bottom {
        overflow-x: auto;
        overflow-y: hidden;
        height: 20px;
    }

    .table-scroll-wrapper {
        overflow-x: auto;
        overflow-y: hidden;
        margin-bottom: -20px; /* Hides the inner bottom scrollbar if necessary */
    }

    .table-scroll-top::after,
    .table-scroll-bottom::after {
        content: '';
        display: block;
        height: 1px;
    }

    .table-scroll-wrapper table {
        font-size: 0.85rem; /* Adjust as needed (e.g., 0.75rem for extra small) */
    }

    .table-scroll-wrapper table th,
    .table-scroll-wrapper table td {
        white-space: nowrap; /* Prevents wrapping if desired */
    }
</style>

<form method="get" asp-action="DatabaseView" asp-controller="Database" class="filter-form">
    <label for="name">Tournament:</label>
    <select name="name" onchange="this.form.submit()">
        @foreach (var t in ViewBag.Tournaments as List<fantasydg.Models.Tournament>)
        {
            if (t.Name == (string)ViewBag.SelectedTournament)
            {
                <option value="@t.Name" selected>@t.Name</option>
            }
            else
            {
                <option value="@t.Name">@t.Name</option>
            }
        }
    </select>

    <label for="division">Division:</label>
    <select id="divisionDropdown" name="division" onchange="this.form.submit()">
        @foreach (var d in ViewBag.Divisions as List<string>)
        {
            if (d == (string)ViewBag.SelectedDivision)
            {
                <option value="@d" selected>@d</option>
            }
            else
            {
                <option value="@d">@d</option>
            }
        }
    </select>

    <label for="round">Round:</label>
    <select name="round" onchange="this.form.submit()">
        <option value="">All</option>
        @if (ViewBag.Rounds is List<int> rounds)
        {
            foreach (var r in rounds)
            {
                if (r == (int?)ViewBag.SelectedRound)
                {
                    <option value="@r" selected>@r</option>
                }
                else
                {
                    <option value="@r">@r</option>
                }
            }
        }
    </select>
</form>

<hr />

@if (roundView)
{
    @await Html.PartialAsync("_RoundTable", (IEnumerable<fantasydg.Models.RoundScore>)Model)
}
else
{
    @await Html.PartialAsync("_TournamentTable", (IEnumerable<fantasydg.Models.PlayerTournament>)Model)
}

<script>
    document.addEventListener("DOMContentLoaded", function () {
        const topScroll = document.querySelector('.table-scroll-top');
        const bottomScroll = document.querySelector('.table-scroll-bottom');
        const wrapper = document.querySelector('.table-scroll-wrapper');

        // Create fake scrollbars with the same width as the table
        function syncScrollBar(scrollDiv) {
            const fakeScroll = document.createElement('div');
            fakeScroll.style.width = wrapper.scrollWidth + 'px';
            fakeScroll.style.height = '1px';
            scrollDiv.appendChild(fakeScroll);
        }

        syncScrollBar(topScroll);
        syncScrollBar(bottomScroll);

        topScroll.addEventListener('scroll', () => {
            wrapper.scrollLeft = topScroll.scrollLeft;
            bottomScroll.scrollLeft = topScroll.scrollLeft;
        });

        bottomScroll.addEventListener('scroll', () => {
            wrapper.scrollLeft = bottomScroll.scrollLeft;
            topScroll.scrollLeft = bottomScroll.scrollLeft;
        });

        wrapper.addEventListener('scroll', () => {
            topScroll.scrollLeft = wrapper.scrollLeft;
            bottomScroll.scrollLeft = wrapper.scrollLeft;
        });
    });
</script>