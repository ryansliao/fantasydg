@model fantasydg.Models.ViewModels.TeamViewModel
@inject Microsoft.AspNetCore.Antiforgery.IAntiforgery Antiforgery

@{
    Layout = "_Layout";
    var teamId = ViewBag.TeamId as int?;
    var tokens = Antiforgery.GetAndStoreTokens(Context);
    var league = Model.Team.League;
    var types = new[] {
        new { Key = "Starter", Label = "Starters", Count = league.StarterCount },
        new { Key = "Bench", Label = "Bench", Count = league.RosterLimit - league.StarterCount },
        new { Key = "InjuryReserve", Label = "Injury Reserve", Count = league.InjuryReserveLimit }
    };
    bool isLocked = ViewBag.IsLocked != null && (bool)ViewBag.IsLocked;
}

<div class="container-fluid">
    <div class="row">
        <div class="col-auto p-0">
            <partial name="_LeagueTeamSidebar" model="(ViewBag.LeagueName as string, Model.Team.LeagueId, ViewBag.TeamId as int?)" />
        </div>
        <div class="col-auto p-0" style="margin-left: 20px">
            <h3 class="mt-4">@Model.Team.Name</h3>
            <hr style="width: 100%; margin: 1rem auto; border-top: 2px solid #444;" />

            <input type="hidden" name="leagueId" value="@Model.Team.LeagueId" />
            <form method="get" asp-action="View" asp-controller="Team">
                <input type="hidden" name="teamId" value="@ViewBag.TeamId" />

                <div class="row g-2 align-items-end mb-3" style="min-width: 0;">
                    <div class="col-auto">
                        <label for="tournament">Tournament:</label>
                        @{
                            int selectedId = ViewBag.SelectedTournamentId ?? -1;
                        }

                        <select id="tournamentDropdown" name="tournamentId" onchange="this.form.submit()">
                            @foreach (var t in ViewBag.Tournaments as List<fantasydg.Models.Tournament>)
                            {
                                var selected = t.Id == selectedId ? "selected" : null;
                                <option value="@t.Id" selected="@selected">@t.Name</option>
                            }
                        </select>
                    </div>
                </div>
            </form>

            <hr style="width: 100%; margin: 1rem auto; border-top: 2px solid #444;" />

            <div class="row justify-content-center">

                @foreach (var rosterGroup in types)
                {
                    var players = Model.Roster
                    .Where(tp => tp.Status.ToString() == rosterGroup.Key)
                    .ToList();

                    <div class="col roster-section text-center">
                        <h5 class="text-center">@rosterGroup.Label</h5>

                        @for (int i = 0; i < rosterGroup.Count; i++)
                        {
                            var tp = i < players.Count ? players[i] : null;

                            var cardClass = tp != null
                            ? "player-card " + (
                            tp.Status == nameof(RosterStatus.Starter) ? "starter-card" :
                            tp.Status == nameof(RosterStatus.Bench) ? "bench-card" : "ir-card")
                            : "player-card";

                            <div class="drop-slot @(isLocked ? "locked-slot" : "")"
                                 data-status="@rosterGroup.Key"
                                 @Html.Raw(!isLocked ? "ondrop=\"drop(event)\" ondragover=\"allowDrop(event)\"" : "")>
                                @if (tp != null)
                                {
                                    if (!isLocked)
                                    {
                                        <div class="@cardClass"
                                             draggable="true"
                                             ondragstart="drag(event)"
                                             data-id="@tp.PDGANumber"
                                             onmousedown="trackClickStart(event)"
                                             onmouseup="maybeOpenModal(event, '@tp.Player.Name', '@tp.PDGANumber')">
                                            @tp.Player.Name
                                        </div>
                                    }
                                    else
                                    {
                                        <div class="@cardClass">
                                            @tp.Player.Name
                                        </div>
                                    }
                                }
                            </div>
                        }
                    </div>
                }
            </div>
            @if (Model.Roster.Any())
            {
                <form method="post" asp-action="LockRoster" style="margin-bottom: 5px;">
                    <input type="hidden" name="teamId" value="@ViewBag.TeamId" />
                    <input type="hidden" name="tournamentId" value="@ViewBag.SelectedTournamentId" />
                    <button type="submit" class="btn btn-@(isLocked ? "secondary" : "primary")">
                        @(isLocked ? "Unlock Roster" : "Lock Roster")
                    </button>
                </form>

                @if (TempData["RosterLockError"] != null)
                {
                    <div class="alert alert-danger">
                        @TempData["RosterLockError"]
                    </div>
                }
            }

            @if (isLocked)
            {
                <div class="alert alert-warning mt-3">Edits are disabled while this roster is locked.</div>
            }
        </div>
    </div>
</div>

<div id="playerModal" style="display:none; position:fixed; top:0; left:0; width:100%; height:100%; background:rgba(0,0,0,0.5); z-index:1050;">
    <div class="modal-content bg-white p-4 rounded" style="margin:10% auto; max-width:400px; position:relative;">
        <button onclick="closeModal()"
                style="position:absolute; top:10px; right:15px; border:none; background:none; font-size:1.5rem; cursor:pointer;">
            &times;
        </button>
        <h4 id="playerModalName"></h4>
        <p>PDGA #: <span id="playerModalId"></span></p>
        <form method="post" asp-action="DropPlayer">
            <input type="hidden" name="teamId" value="@ViewBag.TeamId" />
            <input type="hidden" name="pdgaNumber" id="modalPdgaNumber" />
            <input type="hidden" name="tournamentId" value="@ViewBag.SelectedTournamentId" />
            @if (!(bool)(ViewBag.IsLocked ?? false))
            {
                <button type="submit" class="btn btn-danger mt-2">Drop Player</button>
            }
            else
            {
                <div class="alert alert-warning mt-2">Roster is locked.</div>
            }
        </form>
    </div>
</div>

@section Scripts {
    <script>
        function allowDrop(ev) {
            if (@(isLocked.ToString().ToLower())) return;
            ev.preventDefault();
        }

        function drag(ev) {
            if (@(isLocked.ToString().ToLower())) return;
            ev.dataTransfer.setData("playerId", ev.target.dataset.id);
        }

        function drop(ev) {
            if (@(isLocked.ToString().ToLower())) return;
            ev.preventDefault();

            const draggedId = ev.dataTransfer.getData("playerId");
            const draggedCard = document.querySelector(`[data-id='${draggedId}']`);
            const dropSlot = ev.currentTarget;

            const existingCard = dropSlot.querySelector('.player-card');

            const getClassForStatus = (status) => {
                switch (status) {
                    case "Starter": return "starter-card";
                    case "Bench": return "bench-card";
                    case "InjuryReserve": return "ir-card";
                    default: return "";
                }
            };

            // If the slot already has a card, swap them
            if (existingCard && existingCard !== draggedCard) {
                const originalSlot = draggedCard.closest('.drop-slot');
                const fromStatus = originalSlot.dataset.status;
                const toStatus = dropSlot.dataset.status;

                // DOM swap
                originalSlot.appendChild(existingCard);
                dropSlot.appendChild(draggedCard);

                // Update card classes
                draggedCard.classList.remove("starter-card", "bench-card", "ir-card");
                draggedCard.classList.add(getClassForStatus(toStatus));

                existingCard.classList.remove("starter-card", "bench-card", "ir-card");
                existingCard.classList.add(getClassForStatus(fromStatus));

                // Update backend if status changed
                if (fromStatus !== toStatus) {
                    fetch(`/Team/ChangeStatus/${draggedId}`, {
                        method: 'POST',
                        headers: {
                            'RequestVerificationToken': '@tokens.RequestToken',
                            'Content-Type': 'application/json'
                        },
                        body: JSON.stringify({ newStatus: toStatus })
                    });

                    const swappedId = existingCard.dataset.id;

                    fetch(`/Team/ChangeStatus/${swappedId}`, {
                        method: 'POST',
                        headers: {
                            'RequestVerificationToken': '@tokens.RequestToken',
                            'Content-Type': 'application/json'
                        },
                        body: JSON.stringify({ newStatus: fromStatus })
                    });
                }

            } else {
                // No existing card in slot — simple move
                const newStatus = dropSlot.dataset.status;
                const originalSlot = draggedCard.closest('.drop-slot');

                if (originalSlot !== dropSlot) {
                    dropSlot.appendChild(draggedCard);
                    originalSlot.innerHTML = '';

                    draggedCard.classList.remove("starter-card", "bench-card", "ir-card");
                    draggedCard.classList.add(getClassForStatus(newStatus));

                    fetch(`/Team/ChangeStatus/${draggedId}`, {
                        method: 'POST',
                        headers: {
                            'RequestVerificationToken': '@tokens.RequestToken',
                            'Content-Type': 'application/json'
                        },
                        body: JSON.stringify({ newStatus })
                    });
                }
            }
        }

        let mouseDownTime = null;

        function trackClickStart(event) {
            mouseDownTime = new Date().getTime();
        }

        function showPlayerModal(name, pdgaNumber) {
            document.getElementById('playerModalName').textContent = name;
            document.getElementById('playerModalId').textContent = pdgaNumber;
            document.getElementById('modalPdgaNumber').value = pdgaNumber;
            document.getElementById('playerModal').style.display = 'block';
        }

        function maybeOpenModal(event, name, pdgaNumber) {
            const duration = new Date().getTime() - mouseDownTime;
            if (duration < 200) { // treat as a click
                showPlayerModal(name, pdgaNumber);
            }
        }

        function closeModal() {
            document.getElementById('playerModal').style.display = 'none';
        }

        window.onclick = function(event) {
            const modal = document.getElementById('playerModal');
            if (event.target === modal) {
                closeModal();
            }
        }
    </script>
}

<style>
    .roster-section {
        padding: 0 12px;
    }

        .roster-section h5 {
            font-weight: 600;
            margin-bottom: 1rem;
            text-align: center;
        }

    .drop-slot {
        border: 2px dashed #bbb;
        border-radius: 6px;
        height: 52px;
        padding: 4px 12px;
        margin-bottom: 14px;
        background-color: transparent;
        display: flex;
        align-items: center;
        justify-content: center;
        width: 100%;
        min-width: 250px;
        max-width: 800px;
        margin-left: auto;
        margin-right: auto;
        color: inherit;
    }

    .locked-slot {
        background-color: #eee;
        cursor: not-allowed;
    }

    .player-card {
        border: 1px solid #ccc;
        border-radius: 6px;
        box-shadow: 1px 1px 4px rgba(0, 0, 0, 0.1);
        padding: 6px 12px;
        font-size: 14px;
        font-weight: 500;
        text-align: center;
        width: 100%;
        max-height: 100%;
        overflow: hidden;
        white-space: nowrap;
        text-overflow: ellipsis;
        cursor: grab;
        user-select: none;
    }

    .starter-card {
        background-color: #d4edda; /* light green */
        color: #155724;
    }

    .bench-card {
        background-color: #fff3cd; /* light yellow */
        color: #856404;
    }

    .ir-card {
        background-color: #f8d7da; /* light red */
        color: #721c24;
    }

    .player-card:active {
        cursor: grabbing;
    }

    .modal-overlay {
        position: fixed;
        top: 0;
        left: 0;
        width: 100%;
        height: 100%;
        background: rgba(0, 0, 0, 0.65);
        display: flex;
        justify-content: center;
        align-items: center;
        z-index: 1050;
    }

    .modal-content {
        background: #fff;
        padding: 1.5rem;
        border-radius: 8px;
        position: relative;
        width: 320px;
        max-width: 90%;
        text-align: center;
    }

    .close-button {
        position: absolute;
        right: 10px;
        top: 6px;
        font-size: 24px;
        cursor: pointer;
    }
</style>