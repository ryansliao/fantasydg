@using fantasydg.Models.ViewModels
@model LeaguePlayersViewModel

@{
    ViewBag.Title = "Players";
    bool hasData = Model != null && Model.Players != null && Model.Players.Any();
}

<style>
    body, html {
        margin: 0;
        padding: 0;
        height: 100vh;
    }

    .filter-form {
        display: flex;
        gap: 1rem;
        align-items: center;
        margin-bottom: 0.25rem;
    }

    .players-page-wrapper {
        display: flex;
        flex-direction: column;
        height: calc(100vh - 132px);
    }

    .players-content-row {
        display: flex;
        flex: 1;
        overflow: hidden;
    }

    /* Sidebar stays 220px and scrollable */
    #sidebar {
        width: 220px;
        overflow-y: auto;
        flex-shrink: 0;
    }

    /* Main content grows to fill and scrolls */
    #mainContent {
        flex: 1;
        margin-left: 5px;
        display: flex;
        flex-direction: column;
        overflow: hidden;
        min-width: 0;
    }
    
    /* Contains table and scrolls */
    .table-scroll-container {
        margin-top: 0;
        padding-bottom: 10px;
        max-height: calc(100vh - 120px); /* Adjust based on real header + footer height */
        overflow-y: auto;
        overflow-x: auto;
        width: 100%;
    }

    /* The entire table */
    stats-table {
        padding: 6px 10px;
        border-collapse: collapse;
        table-layout: fixed;
        width: 100%;
        margin-bottom: -20px;
        overflow-y: auto;
        overflow-x: auto;
        margin-bottom: 0;
    }

    /* Column headers */
    .stats-table thead th {
        font-size: 0.85rem;
        white-space: normal;
        vertical-align: middle;
        text-align: center;
        padding: 5px 7px;
        line-height: 15px;
        position: sticky;
        top: 0;
        background: rgba(225, 225, 225);
        z-index: 2;
    }

    /* First column */
    .stats-table th:first-child,
    .stats-table td:first-child {
        position: sticky;
        left: 0;
        background: rgba(240, 240, 240);
        z-index: 2;
        min-width: 60px;
        max-width: 60px;
    }

    /* Second column */
    .stats-table th:nth-child(2),
    .stats-table td:nth-child(2) {
        position: sticky;
        left: 60px;
        min-width: 200px;
        max-width: 200px;
        background: rgba(240, 240, 240);
        z-index: 2;
        overflow: hidden;
        text-overflow: ellipsis;
        text-align: left;
        white-space: nowrap;
    }

    /* Columns excluding the first two */
    .stats-table th:nth-child(n+3),
    .stats-table td:nth-child(n+3) {
        min-width: 75px;
        max-width: 75px;
        text-align: center;
    }

    /* First header of column headers */
    .stats-table thead th:first-child {
        z-index: 3;
        background: rgba(225, 225, 225);
    }

    /* Second header of column headers */
    .stats-table thead th:nth-child(2) {
        text-align: left;
        z-index: 3;
        background: rgba(225, 225, 225);
    }

    /* Table rows */
    .stats-table tbody tr:nth-child(odd) {
        background-color: white;
    }

    .stats-table tbody tr:nth-child(even) {
        background-color: #f9f9f9;
    }

    /* Table cells */
    .stats-table td {
        font-size: 0.9rem;
        white-space: nowrap;
        padding: 5px 7px;
        line-height: 15px;
        text-overflow: ellipsis;
        text-align: center;
    }
  
</style>


<div class="players-page-wrapper">
    <div class="players-content-row">
        <div id="sidebar">
            @await Html.PartialAsync("_LeagueTeamSidebar", ((string)ViewBag.LeagueName!, (int)ViewBag.LeagueId!, (int?)ViewBag.TeamId))
        </div>
        <div id="mainContent">
            <h2 class="mt-2">Available Players</h2>

            <form method="get" asp-action="Players" asp-controller="League" class="filter-form">
                <input type="hidden" name="leagueId" value="@Model.League.LeagueId" />
                <div class="row g-2 align-items-end mb-3" style="min-width: 0;">
                    <div class="col-auto">
                        <label for="tournament">Tournament:</label>
                        @{
                            int selectedId = ViewBag.SelectedTournamentId ?? -1;
                        }

                        <select id="tournamentDropdown" name="tournamentId" onchange="this.form.submit()">
                            @foreach (var t in ViewBag.Tournaments as List<fantasydg.Models.Tournament>)
                            {
                                if (t.Id == selectedId)
                                {
                                    <option value="@t.Id" selected>@t.Name</option>
                                }
                                else
                                {
                                    <option value="@t.Id">@t.Name</option>
                                }
                            }
                        </select>
                    </div>

                    <div class="col-auto">
                        <label for="division">Division:</label>
                        <select id="divisionDropdown" name="division" onchange="this.form.submit()">
                            @foreach (var d in ViewBag.Divisions as List<string>)
                            {
                                if (d == (string)ViewBag.SelectedDivision)
                                {
                                    <option value="@d" selected>@d</option>
                                }
                                else
                                {
                                    <option value="@d">@d</option>
                                }
                            }
                        </select>
                    </div>
                </div>
            </form>
            @if (!hasData)
            {
                <div class="alert alert-warning mt-4">
                    No data available. Please enter a tournament to begin.
                </div>
            }
            else
            {
                @await Html.PartialAsync("~/Views/Players/PlayersTable.cshtml", Model.Players)
            }
        </div>
    </div>
</div>


<script>
    document.addEventListener("DOMContentLoaded", function () {
        const topScroll = document.querySelector('.table-scroll-top');
        const bottomScroll = document.querySelector('.table-scroll-bottom');
        const wrapper = document.querySelector('.table-scroll-wrapper');

        // Create fake scrollbars with the same width as the table
        function syncScrollBar(scrollDiv) {
            const fakeScroll = document.createElement('div');
            fakeScroll.style.width = wrapper.scrollWidth + 'px';
            fakeScroll.style.height = '1px';
            scrollDiv.appendChild(fakeScroll);
        }

        syncScrollBar(topScroll);
        syncScrollBar(bottomScroll);

        topScroll.addEventListener('scroll', () => {
            wrapper.scrollLeft = topScroll.scrollLeft;
            bottomScroll.scrollLeft = topScroll.scrollLeft;
        });

        bottomScroll.addEventListener('scroll', () => {
            wrapper.scrollLeft = bottomScroll.scrollLeft;
            topScroll.scrollLeft = bottomScroll.scrollLeft;
        });

        wrapper.addEventListener('scroll', () => {
            topScroll.scrollLeft = wrapper.scrollLeft;
            bottomScroll.scrollLeft = wrapper.scrollLeft;
        });
    });

    document.querySelectorAll('#tournamentDropdown, #divisionDropdown).forEach(el => {
        el.addEventListener('change', () => {
            const tournamentId = document.getElementById('tournamentDropdown').value;
            const division = document.getElementById('divisionDropdown').value;

            let url = `/tournaments/${tournamentId}`;
            if (division) url += `/${division}`;

            window.location.href = url;
        });
    });
</script>