@using fantasydg.Models.ViewModels
@model LeaguePlayersViewModel

@{
    ViewBag.Title = "Available Players";
    bool hasData = Model != null && Model.Players != null && Model.Players.Any();
}

<style>
    body, html {
        margin: 0;
        padding: 0;
    }

    .d-none {
        display: none !important;
    }

    .players-page-wrapper {
        display: flex;
        flex-direction: column;
        height: calc(100vh - 132px);
    }

    .players-content-row {
        display: flex;
        flex: 1;
        overflow: hidden;
    }

    #sidebar {
        width: 220px;
        overflow-y: auto;
        flex-shrink: 0;
    }

    .sidebar a.btn-light,
    .sidebar button.btn-light {
        transition: all 0.2s ease;
    }

        .sidebar a.btn-light:hover,
        .sidebar button.btn-light:hover {
            background-color: #e2e6ea;
            font-weight: bold;
            color: #000;
        }

    #mainContent {
        flex: 1;
        margin-left: 10px;
        display: flex;
        flex-direction: column;
        overflow: hidden;
        min-width: 0;
    }

    .table-scroll-container {
        flex: none;
        overflow: visible;
        padding-bottom: 20px;
    }

    /* Table setup */
    .stats-table {
        width: 100%;
        table-layout: fixed;
        border-collapse: collapse;
        box-sizing: border-box;
        vertical-align: middle;
    }

        /* General table styling */
        .stats-table th,
        .stats-table td,
        div.DTFC_LeftWrapper table.dataTable th,
        div.DTFC_LeftWrapper table.dataTable td {
            font-size: 0.8rem;
            padding: 2px 4px;
            line-height: 1.1;
            height: auto;
            min-height: 0;
            box-sizing: border-box;
            vertical-align: middle;
            white-space: nowrap;
            overflow: hidden;
            text-overflow: ellipsis;
            text-align: center;
        }

        /* Table buttons */
        .stats-table button.btn {
            display: inline-flex;
            align-items: center;
            justify-content: center;
            padding: 0;
            margin: 0;
            width: 20px;
            height: 20px;
            font-size: 0.9rem;
            line-height: 1;
        }

    div.dataTables_filter {
        margin-bottom: 10px;
    }

    /* DataTables scroll container */
    div.dataTables_scrollBody {
        overflow-x: auto !important;
        overflow-y: scroll !important;
    }

        /* Alternating rows */
        table.dataTable.stripe tbody tr:nth-child(odd),
        div.dataTables_scrollBody table tbody tr:nth-child(odd) {
            background-color: #ffffff;
        }

        table.dataTable.stripe tbody tr:nth-child(even),
        div.dataTables_scrollBody table tbody tr:nth-child(even) {
            background-color: #f9f9f9;
        }

    /* Column headers */
    table.dataTable thead th,
    div.DTFC_LeftWrapper table.dataTable thead th {
        background-color: #e1e1e1;
        color: #000;
        font-weight: bold;
        font-size: 0.8rem;
        text-wrap: wrap;
        text-align: center !important;
        vertical-align: middle;
        padding: 4px 5px;
        line-height: 1.1;
    }
  
</style>


<div class="players-page-wrapper">
    <div class="players-content-row">
        <div id="sidebar">
            @await Html.PartialAsync("_LeagueTeamSidebar", ((string)ViewBag.LeagueName!, (int)ViewBag.LeagueId!, (int?)ViewBag.TeamId))
        </div>
        <div id="mainContent">
            <h2 class="mt-2">Available Players</h2>

            <form method="get" asp-action="Players" asp-controller="League" class="filter-form">
                <input type="hidden" name="leagueId" value="@Model.League.LeagueId" />
                <div class="row g-2 align-items-end mb-3" style="min-width: 0;">
                    <div class="col-auto">
                        <label for="tournament">Tournament:</label>
                        @{
                            int selectedId = ViewBag.SelectedTournamentId ?? -1;
                        }

                        <select id="tournamentDropdown" name="tournamentId" onchange="this.form.submit()">
                            @foreach (var t in ViewBag.Tournaments as List<fantasydg.Models.Tournament>)
                            {
                                if (t.Id == selectedId)
                                {
                                    <option value="@t.Id" selected>@t.Name</option>
                                }
                                else
                                {
                                    <option value="@t.Id">@t.Name</option>
                                }
                            }
                        </select>
                    </div>

                    <div class="col-auto">
                        <label for="division">Division:</label>
                        <select id="divisionDropdown" name="division" onchange="this.form.submit()">
                            @foreach (var d in ViewBag.Divisions as List<string>)
                            {
                                if (d == (string)ViewBag.SelectedDivision)
                                {
                                    <option value="@d" selected>@d</option>
                                }
                                else
                                {
                                    <option value="@d">@d</option>
                                }
                            }
                        </select>
                    </div>
                </div>
            </form>
            @if (!hasData)
            {
                <div class="alert alert-warning mt-4">
                    No data available. Please enter a tournament to begin.
                </div>
            }
            else
            {
                @await Html.PartialAsync("~/Views/Players/PlayersTable.cshtml", Model.Players)
            }
        </div>
    </div>
</div>


<script>
    function updatePlayerTable() {
        const tournamentId = document.getElementById('tournamentDropdown')?.value;
        const division = document.getElementById('divisionDropdown')?.value;
        const leagueId = @ViewBag.LeagueId;

        const url = `/League/FilterPlayers?leagueId=${leagueId}&tournamentId=${tournamentId}&division=${encodeURIComponent(division)}`;

        fetch(url, {
            headers: {
                'X-Requested-With': 'XMLHttpRequest'
            }
        })
        .then(res => res.text())
        .then(html => {
            document.getElementById("table-scroll-container").innerHTML = html;
            $('#playersTable').DataTable(); // Re-initialize DataTables
        });
    }

    document.getElementById("tournamentDropdown")?.addEventListener("change", updatePlayerTable);
    document.getElementById("divisionDropdown")?.addEventListener("change", updatePlayerTable);

    document.addEventListener("DOMContentLoaded", function () {
        const topScroll = document.querySelector('.table-scroll-top');
        const bottomScroll = document.querySelector('.table-scroll-bottom');
        const wrapper = document.querySelector('.table-scroll-wrapper');

        // Create fake scrollbars with the same width as the table
        function syncScrollBar(scrollDiv) {
            const fakeScroll = document.createElement('div');
            fakeScroll.style.width = wrapper.scrollWidth + 'px';
            fakeScroll.style.height = '1px';
            scrollDiv.appendChild(fakeScroll);
        }

        syncScrollBar(topScroll);
        syncScrollBar(bottomScroll);

        topScroll.addEventListener('scroll', () => {
            wrapper.scrollLeft = topScroll.scrollLeft;
            bottomScroll.scrollLeft = topScroll.scrollLeft;
        });

        bottomScroll.addEventListener('scroll', () => {
            wrapper.scrollLeft = bottomScroll.scrollLeft;
            topScroll.scrollLeft = bottomScroll.scrollLeft;
        });

        wrapper.addEventListener('scroll', () => {
            topScroll.scrollLeft = wrapper.scrollLeft;
            bottomScroll.scrollLeft = wrapper.scrollLeft;
        });
    });
</script>